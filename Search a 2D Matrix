---------------------------------
LeetCode 74 - Search a 2D Matrix
---------------------------------
You are given an m x n integer matrix matrix with two properties: Each row is sorted in a non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if the target is in the matrix or false otherwise.
Write a solution in O(log(m * n)) time complexity.

----------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length; // Number of rows in the matrix
        int m = matrix[0].length; // Number of columns in the matrix
        int low = 0, high = (n * m) - 1; // Initializing the search range

        // Binary search in a 2D matrix treated as a 1D array
        while (low <= high) {
            int mid = (low + high) >> 1; // Midpoint index in the 'flattened' array
            int row = mid / m; // Corresponding row index in the 2D matrix
            int column = mid % m; // Corresponding column index in the 2D matrix

            // Check if the middle element is the target
            if (matrix[row][column] == target) {
                return true; // Target found
            } 
            // Adjust the search range based on the middle element's value
            else if (matrix[row][column] > target) {
                high = mid - 1; // Target is in the lower half
            } else {
                low = mid + 1; // Target is in the upper half
            }
        }

        return false; // Target not found
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------

Time Complexity : O(log(n√óm) || Space Complexity : O(1) 
