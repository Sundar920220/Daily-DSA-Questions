-----------------------------------------------------
LeetCode 153- Find Minimum in Rotated Sorted Array
-----------------------------------------------------

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array. You must write an algorithm that runs in O(log n) time.

 Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int findMin(int[] nums) {
        // Initialize pointers and the variable to track the minimum value found.
        int low = 0, high = nums.length - 1, ans = Integer.MAX_VALUE;

        // Loop until the search space is exhausted.
        while (low <= high) {
            // Calculate the middle index using bitwise shift for efficiency.
            int mid = (low + high) >> 1;

            // Check if the left part (from low to mid) is sorted.
            if (nums[low] <= nums[mid]) {
                // If sorted, the minimum value in this part is nums[low].
                // Update ans with the minimum value found so far.
                ans = Math.min(nums[low], ans);
                // Discard the left part by moving the low pointer to mid + 1.
                low = mid + 1;
            } else {
                // If the left part is not sorted, then the right part must be sorted.
                // Update ans with the minimum value found at mid.
                ans = Math.min(nums[mid], ans);
                // Discard the right part by moving the high pointer to mid - 1.
                high = mid - 1;
            }
        }

        // Return the minimum value found.
        return ans;
    }
}
------------------------------------------------------------
Time Complexity : O(log N) || Space Complexity : O(1)
-------------------------------------------------------------



